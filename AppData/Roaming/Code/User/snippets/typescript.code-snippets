{
  "param": {
    "prefix": "param",
    "body": [
      "${1:name}: ${2:type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "const": {
    "prefix": "const",
    "body": [
      "const ${1:name}: ${2:type} = ${3:value}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "let": {
    "prefix": "let",
    "body": [
      "let ${1:name}: ${2type} = ${3:value}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "type_union": {
    "prefix": "type_union",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = ${2:type1} | ${3:type2}",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_alias": {
    "prefix": "type_alias",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = ${2:type}",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_tuple": {
    "prefix": "type_tuple",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = [${2:type1}, ${3:type2}]",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_function": {
    "prefix": "type_function",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = (${2:param}) => ${3:return_type}",
    ],
    "scope": "typescript, typescriptreact",
  },
  "enum_type": {
    "prefix": "enum_type",
    "body": [
      "export enum ${1/(.+)/${1:/capitalize}/} {",
      "  ${2:FIRST},",
      "  ${3:SECOND},",
      "}"
    ],
    "scope": "typescript, typescriptreact",
  },
  "interface_object": {
    "prefix": "interface_object",
    "body": [
      "export interface ${1/(.+)/${1:/capitalize}/} {",
      "  ${2:props1}: ${3:type};",
      "  ${4:props2}: ${5:type};",
      "};"
    ],
    "scope": "typescript, typescriptreact",
  },
  "interface_function": {
    "prefix": "interface_function",
    "body": [
      "export interface ${1/(.+)/${1:/capitalize}/} {",
      "  (${2:param}): ${3:return_type};",
      "};"
    ],
    "scope": "typescript, typescriptreact",
  },
}