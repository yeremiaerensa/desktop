{
  /*
  ! ------------------- BUILT IN SECTION -------------------
  */
  "Set": {
    "prefix": "Set",
    "body": [
      "new Set(${1})",
    ],
    "scope": "typescript, typescriptreact",
  },
  /*
  ! ------------------- TYPE SECTION -------------------
  */
  "generic": {
    "prefix": "generic",
    "body": [
      "${1:type}<${2:T}>",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_union": {
    "prefix": "type_union",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = ${2:type1} | ${3:type2}",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_alias": {
    "prefix": "type_alias",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = ${2:type}",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_tuple": {
    "prefix": "type_tuple",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = [${2:type1}, ${3:type2}]",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_fn": {
    "prefix": "type_fn",
    "body": [
      "export type ${1/(.+)/${1:/capitalize}/} = (${2:param}) => ${3:return_type}",
    ],
    "scope": "typescript, typescriptreact",
  },
  "type_enum": {
    "prefix": "type_enum",
    "body": [
      "export enum ${1/(.+)/${1:/capitalize}/} {",
      "  ${2:FIRST},",
      "  ${3:SECOND},",
      "}"
    ],
    "scope": "typescript, typescriptreact",
  },
  /*
  ! ------------------- INTERFACE SECTION -------------------
  */
  "interface": {
    "prefix": "interface",
    "body": [
      "export interface ${1/(.+)/${1:/capitalize}/} {",
      "  ${0}",
      "};"
    ],
    "scope": "typescript, typescriptreact",
  },
  "interface_extends": {
    "prefix": "interface_extends",
    "body": [
      "export interface ${1/(.+)/${1:/capitalize}/} extends ${2/(.+)/${2:/capitalize}/} {",
      "  ${0}",
      "};"
    ],
    "scope": "typescript, typescriptreact",
  },
  "interface_prop": {
    "prefix": "interface_prop",
    "body": [
      "${1:param_name}: ${2:param_type};"
    ],
    "scope": "typescript,typescriptreact",
  },
  "interface_prop_optional": {
    "prefix": "interface_prop_optional",
    "body": [
      "${1:param_name}?: ${2:param_type};"
    ],
    "scope": "typescript,typescriptreact",
  },
  "interface_method": {
    "prefix": "interface_function",
    "body": [
      "${1:method_name}(${2:param}): ${3:return_type};",
    ],
    "scope": "typescript, typescriptreact",
  },
  "interface_overload": {
    "prefix": "interface_overload",
    "body": [
      "interface ${1:fn_type_name} {",
      "  (${2:param}): ${3:return_type};",
      "  (${4:param}): ${5:return_type};",
      "}",
    ],
    "scope": "typescript, typescriptreact",
  },
  /*
  ! ------------------- OOP SECTION -------------------
  */
  "class": {
    "prefix": "class",
    "body": [
      "export default class ${1/(.+)/${1:/capitalize}/} {",
      "  ${0:class_constructor}",
      "};"
    ],
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
  },
  "class_constructor": {
    "prefix": "class_constructor",
    "body": [
      "constructor(${1:class_param_properties}) {",
      "  ${0}",
      "}",
    ],
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
  },
  "class_constructor_extends": {
    "prefix": "class_constructor_extends",
    "body": [
      "constructor(${3:params}: ${4:params_type}, ${0:class_param_properties}) {",
      "  super(${3})",
      "}",
    ],
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
  },
  "class_extends": {
    "prefix": "class_extends",
    "body": [
      "export default class ${1/(.+)/${1:/capitalize}/} extends ${2/(.+)/${2:/capitalize}/ {",
      "  ${0:class_constructor_extends}",
      "};"
    ],
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
  },
  "class_implements": {
    "prefix": "class_implements",
    "body": [
      "export default class ${1/(.+)/${1:/capitalize}/} implements ${2/(.+)/${2:/capitalize}/ {",
      "  ${0:class_constructor}",
      "};"
    ],
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
  },
  "class_abstract": {
    "prefix": "class_abstract",
    "body": [
      "export default abstract class ${1/(.+)/${1:/capitalize}/} {",
      "  ${0:class_constructor}",
      "};"
    ],
    "scope": "javascript, javascriptreact, typescript, typescriptreact",
  },
  "class_init": {
    "prefix": "class_init",
    "body": [
      "const ${1:object_name}: ${2/(.*)/${1:/capitalize}/} = new ${2/(.*)/${1:/capitalize}/}(${3:param_value});"
    ],
    "scope": "typescript,typescriptreact"
  },
  "class_param_properties_public": {
    "prefix": "class_param_properties_public",
    "body": [
      "public ${1:param_name}: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_param_properties_public_readonly": {
    "prefix": "class_param_properties_public_readonly",
    "body": [
      "public readonly ${1:param_name}: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_param_properties_public_optional": {
    "prefix": "class_param_properties_public_optional",
    "body": [
      "public ${1:param_name}?: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_param_properties_private": {
    "prefix": "class_param_properties_private",
    "body": [
      "private _${1:param_name}: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_param_properties_private_optional": {
    "prefix": "class_param_properties_private_optional",
    "body": [
      "private _${1:param_name}?: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_param_properties_protected": {
    "prefix": "class_param_properties_protected",
    "body": [
      "protected _${1:param_name}: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_param_properties_protected_optional": {
    "prefix": "class_param_properties_protected_optional",
    "body": [
      "protected _${1:param_name}?: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_instance_of": {
    "prefix": "class_instance_of",
    "body": [
      "${1:child_class} instanceof ${2:parent_class}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_super": {
    "prefix": "class_super",
    "body": [
      "super(${1:parent_constructor_param})"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_method": {
    "prefix": "class_method",
    "body": [
      "${1:method_name}(${2:param}): ${3:return_type} {",
      "  ${0}",
      "}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_method_get": {
    "prefix": "class_method_get",
    "body": [
      "get ${1}(): ${2:prop_type} {",
      "  return this._${1:prop_name};",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_method_set": {
    "prefix": "class_method_set",
    "body": [
      "set ${1}(${3:param}): void {",
      "  this._${1:prop_name}= value;",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_method_abstract": {
    "prefix": "class_method_abstract",
    "body": [
      "abstract ${1:method_name}(${2:param}): ${3:return_type};"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_method_static": {
    "prefix": "class_method_static",
    "body": [
      "static ${1:method_name}(${2:param}): ${3:return_type} {",
      "  ${0}",
      "}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_prop_abstract": {
    "prefix": "class_prop_abstract",
    "body": [
      "abstract ${1:prop_name}: ${2:prop_type};"
    ],
    "scope": "typescript,typescriptreact",
  },
  "class_prop_static": {
    "prefix": "class_prop_static",
    "body": [
      "static ${1:PROP_NAME}: ${2:prop_type} = ${3:prop_value};"
    ],
    "scope": "typescript,typescriptreact",
  },
  /*
  ! ------------------- CONDITIONAL SECTION -------------------
  */
  "conditional_if_one_line": {
    "prefix": "conditional_if_one_line",
    "body": [
      "if (${1:condition}) ${0};"
    ],
    "scope": "typescript,typescriptreact",
  },
  "conditional_if": {
    "prefix": "conditional_if",
    "body": [
      "if (${1:condition}) {",
      "  ${2://logic}",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "conditional_else": {
    "prefix": "conditional_else",
    "body": [
      "else {",
      "  ${1://logic}",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "conditional_else_if": {
    "prefix": "conditional_else_if",
    "body": [
      "else if (${1:condition}) {",
      "  ${2://logic}",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "conditional_ternary_conditional": {
    "prefix": "conditional_ternary_conditional",
    "body": [
      "(${1:condition}) ? ${2:true} : ${3:false}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "conditional_ternary_if": {
    "prefix": "conditional_ternary_logical_and",
    "body": [
      "(${1:condition}) && ${2:true}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "conditional_ternary_fallback": {
    "prefix": "conditional_ternary_fallback",
    "body": [
      "${1:primary} || ${2:fallback}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "conditional_ternary_nullish_fallback": {
    "prefix": "conditional_ternary_nullish_fallback",
    "body": [
      "${1:primary} ?? ${2:fallback}",
    ],
    "scope": "typescript,typescriptreact",
  },
  /*
  ! ------------------- SWITCH SECTION -------------------
  */
  "switch": {
    "prefix": "switch",
    "body": [
      "switch (${1:condition}) {",
      "  ${2:switch_case}",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "switch_case": {
    "prefix": "switch_case",
    "body": [
      "case ${1:case}:",
      "  ${2:logic};",
    ],
    "scope": "typescript,typescriptreact",
  },
  "switch_default": {
    "prefix": "switch_default",
    "body": [
      "default :",
      "  ${2:logic};",
    ],
    "scope": "typescript,typescriptreact",
  },
  /*
  ! ------------------- LOOPING SECTION -------------------
  */
  "loop_for": {
    "prefix": "loop_for",
    "body": [
      "for (let i = 0; i < ${1:data.length}; i++) {",
      "  ${2://logic};",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "loop_for_of": {
    "prefix": "loop_for_of",
    "body": [
      "for (const ${1:element} of ${2:iterable}) {",
      "  ${2://logic};",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "loop_for_in": {
    "prefix": "loop_for_in",
    "body": [
      "for (const ${1:key} in ${2:iterable}) {",
      "  ${3:console.debug(key);",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "loop_while": {
    "prefix": "loop_while",
    "body": [
      "while (${1:true_condition}) {",
      "  ${2://logic};",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "loop_do_while": {
    "prefix": "loop_do_while",
    "body": [
      "do {",
      "  ${2://logic};",
      "} while (${1:true_condition})",
    ],
    "scope": "typescript,typescriptreact",
  },
  /*
  ! ------------------- TRY CATCH SECTION -------------------
  */
  "try_catch": {
    "prefix": "try_catch",
    "body": [
      "try {",
      "  ${1://logic};",
      "} catch (error) {",
      "  ${2://error_logic};",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "finally": {
    "prefix": "finally",
    "body": [
      "finally {",
      "  ${1://finally_logic};",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  /*
  ! ------------------- FUNCTION SECTION -------------------
  */
  "fn_param": {
    "prefix": "fn_param",
    "body": [
      "${1:param_name}: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_param_spread": {
    "prefix": "fn_param_spread",
    "body": [
      "...${1:param_name}: ${2:param_type}[]"
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_param_function": {
    "prefix": "fn_param_function",
    "body": [
      "${1:param_name}: (${2:fn_param}) => ${3:return_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_param_optional": {
    "prefix": "fn_param_optional",
    "body": [
      "${1:param_name}?: ${2:param_type}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_declaration": {
    "prefix": "fn_declaration",
    "body": [
      "function ${1:fn_name}(${2:param}): ${3:return_type) {",
      "  ${0}",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_expression": {
    "prefix": "fn_expression",
    "body": [
      "const ${1:fn_name} = function (${2:param}): ${3:return_type) {",
      "  ${0}",
      "}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_arrow": {
    "prefix": "fn_arrow",
    "body": [
      "(${1:param}): ${2:return_type} => ${0}",
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_create_instance": {
    "prefix": "fn_create_instance",
    "body": [
      "const classes = {${1:class_list}};",
      "",
      "function createInstance<T extends keyof typeof classes>(",
      "  type: T,",
      "  args: ConstructorParameters<typeof classes[T]>",
      "): InstanceType<typeof classes[T]> {",
      "  return new classes[type](...args);",
      "}"
    ],
    "scope": "typescript,typescriptreact",
  },
  "fn_throttle_react_hook": {
    "description": "(React hook in TypeScript)\n\n@param fn : function callback\n@param delay : number (execution delay)\n@param options : { leading, trailing }",
    "prefix": "fn_throttle_react_hook",
    "body": [
      "import { useRef, useCallback, useEffect } from \"react\";",
      "",
      "type ThrottleOptions = {",
      "  leading?: boolean;",
      "  trailing?: boolean;",
      "};",
      "",
      "type ThrottleControls = {",
      "  cancelThrottle: () => void;",
      "  flushThrottle: () => void;",
      "};",
      "",
      "export default function useThrottle<T extends (...args: any[]) => void>(",
      "  fn: T,",
      "  delay: number = 1000,",
      "  options: ThrottleOptions = { leading: true, trailing: true }",
      "): [(...args: Parameters<T>) => void, ThrottleControls] {",
      "  const fnRef = useRef(fn);",
      "  const lastArgs = useRef<Parameters<T> | null>(null);",
      "  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);",
      "  const isThrottled = useRef(false);",
      "",
      "  const { leading = true, trailing = true } = options;",
      "",
      "  useEffect(() => {",
      "    fnRef.current = fn;",
      "  }, [fn]);",
      "",
      "  const throttledFn = useCallback(",
      "    (...args: Parameters<T>) => {",
      "      if (isThrottled.current) {",
      "        if (trailing) lastArgs.current = args;",
      "        return;",
      "      }",
      "",
      "      if (leading) {",
      "        fnRef.current(...args);",
      "      } else if (trailing) {",
      "        lastArgs.current = args;",
      "      }",
      "",
      "      isThrottled.current = true;",
      "",
      "      timeoutRef.current = setTimeout(() => {",
      "        isThrottled.current = false;",
      "",
      "        if (trailing && lastArgs.current) {",
      "          fnRef.current(...lastArgs.current);",
      "          lastArgs.current = null;",
      "        }",
      "      }, delay);",
      "    },",
      "    [delay, leading, trailing]",
      "  );",
      "",
      "  const cancelThrottle = useCallback(() => {",
      "    if (timeoutRef.current) {",
      "      clearTimeout(timeoutRef.current);",
      "      timeoutRef.current = null;",
      "    }",
      "    isThrottled.current = false;",
      "    lastArgs.current = null;",
      "  }, []);",
      "",
      "  const flushThrottle = useCallback(() => {",
      "    if (timeoutRef.current) {",
      "      clearTimeout(timeoutRef.current);",
      "      timeoutRef.current = null;",
      "    }",
      "",
      "    isThrottled.current = false;",
      "",
      "    if (lastArgs.current) {",
      "      fnRef.current(...lastArgs.current);",
      "      lastArgs.current = null;",
      "    }",
      "  }, []);",
      "",
      "  return [throttledFn, { cancelThrottle, flushThrottle }];",
      "}"
    ],
    "scope": "typescript, typescriptreact"
  }
}