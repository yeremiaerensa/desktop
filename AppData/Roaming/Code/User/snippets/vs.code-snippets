{
  /** 
  * * JavaScript Snippet (jssnippet) 
  */
  "const": {
    "prefix": "const",
    "body": [
      "const ${1:name} = ${0}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(writer) \n Return: text"
  },
  /** 
  * * JavaScript Array | String Snippet (jssnippet) 
  */
  "concat": {
    "prefix": "arr_or_str_concat",
    "body": [
      "${1:array|string}.concat(${0:...valueN :any|string})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return concatenated :array|string \n\n Docs : \n join 2 or more array or string and return new joined array or string",
  },
  "includes": {
    "prefix": "arr_or_str_includes",
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "body": [
      "${0}${1:array|string}.includes(${2:element|substring :any|string})"
    ],
    "description": "(Pure Function | Immutable) \n @return isIncludes :boolean \n @secondParams fromIndex ?:number [define: search starting point] \n\n Docs : \n to check whether include the value",
  },
  "index_of": {
    "prefix": "arr_or_str_index_of",
    "body": [
      "${0}${1:array|string}.indexOf(${2:element|character :any|string})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return index|-1 :number \n @secondParams fromIndex ?:number [define: search starting point] \n\n Docs : \n to get index from the first element or character discovered \n if not found will return -1",
  },
  "last_index_of": {
    "prefix": "arr_or_str_last_index_of",
    "body": [
      "${0}${1:array|string}.lastIndexOf(${2:element|character :any|string})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return index|-1 :number \n @secondParams fromIndex ?:number [define: search starting point] \n\n Docs : \n to get index from the last element or character discovered \n if not found will return -1",
  },
  "slice": {
    "prefix": "arr_or_str_slice",
    "body": [
      "${0}${1:array|string}.slice(${2:startIndex :number})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return sliced :array|string \n @secondParams exclusiveIndex ?:number [define : end of slice]  \n @Params exclusiveIndex :number [define: deadline but not including (index - 1)]",
  },
  /** 
  * * JavaScript Regex Snippet (jssnippet) 
  */
  "regex_pattern": {
    "description": "flag and parameter sample \n return comment",
    "prefix": "rgx_pattern",
    "body": [
      "// @param /\\d+/ (Satu atau lebih angka)",
      "// @param /^\\d+$/ (String berisi hanya angka)",
      "// @param /[a-z]+/ (Satu atau lebih huruf kecil)",
      "// @param /^[A-Za-z0-9]+$/ (Huruf besar/kecil + angka)",
      "// @param /^[A-Za-z]+$/ (String Hanya huruf besar atau kecil)",
      "// @param /^\\d{3}-\\d{4}$/ (3angka-4angka)",
      "// * flag g (Cari semua kecocokan, bukan cuma yang pertama)",
      "// * flag i (Abaikan huruf besar/kecil)",
      "// * flag \\d (Digit angka 0–9)",
      "// * flag \\D (Bukan digit)",
      "// * flag \\w ([a-zA-Z0-9_])",
      "// * flag \\W (Bukan word character)",
      "// * flag \\s (Spasi, tab (\\t), newline (\\n)",
      "// * flag \\S (Bukan spasi)",
      "// * flag . (Bukan word character)",
      "// * flag + (Satu atau lebih, \\d+ cocok '123')",
      "// * flag * (Nol atau lebih, \\d* cocok '', '1')",
      "// * flag ? (Nol atau satu, \\d? cocok '', '1')",
      "// * flag {n} (Tepat n kali, \\d{3} cocok '123')",
      "// * flag {n,} (Tepat n kali , \\d{2,} cocok '123')",
      "// * flag {n,m} (Antara n sampai m kali, \\d{2,4} cocok '12', '123')",
      "// * flag ^ (Awal string, ^a cocok 'abc' tapi bukan 'ba')",
      "// * flag $ (Akhir string, z$ cocok 'xyz' tapi bukan 'za')",
      "// * flag \\b (Antara n sampai m kali, \\bis\\b cocok 'this is it')",
      "// * flag \\B (Antara n sampai m kali, \\Bis\\B cocok 'mist' (dalam kata))",
      "// * flag \\B (Antara n sampai m kali, \\Bis\\B cocok 'mist' (dalam kata))",
      "// * flag \\B (Antara n sampai m kali, \\Bis\\B cocok 'mist' (dalam kata))",
      "// * flag [^]+ (apa aja kecuali yang di dalam bracket,[^abc] 'd', '1', dsb",
      "// * flag []+ (harus salah satu yang di dalam bracket, [abc] 'a', 'b', 'c'))",
      "",
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  /** 
  * * JavaScript String Snippet (jssnippet)
  */
  "char_at": {
    "prefix": "str_char_at",
    "body": [
      "${0}${1:string}.charAt(${2:index :number})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return character :string \n\n Docs : \n get character of string from index \n if not match will return \"\" \n\n",
  },
  "code_point_at": {
    "prefix": "str_code_point_at",
    "body": [
      "${0}${1:string}.codePointAt(${2:index :number})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return unicode :number \n\n Docs : \n get unicode from character according the index ",
  },
  "end_with": {
    "prefix": "str_end_with",
    "body": [
      "${1:string}.endsWith(\"${0:substring :string}\")"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return isEndsWith :boolean \n @secondParams exclusiveIndex ?:number [define : inspection area limits] \n @Params exclusiveIndex :number [define: deadline but not including (index - 1)] \n\n Docs : \n inspect string is end with substring or not",
  },
  "locale_compare": {
    "prefix": "str_locale_compare",
    "body": [
      "${0}${1:a}.localeCompare(${2:b}, \"id\", {",
      "  sensitivity: \"${3:base|accent|case|variant}\",",
      "  ignorePunctuation: ${4:true|false},",
      "  numeric: ${5:true|false},",
      "  caseFirst: \"${6:upper|lower}\"",
      "})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return -1|0|1 :number \n @value base [define : normal no base on] \n @value accent [define : base on accent (a ≠ á)] \n @value case [define : base on case (a ≠ A, but a == á)] \n @value variant [define : base on accent and case] \n @props ignorePunctuation [define : isIgnorePunctuation (false : \"a-b\" ≠ \"ab\")] \n @props numeric [define : isNumeric (true : \"10\" > \"2\")] \n @value upper [define : capital are sorted first] \n @value lower [define : lower are sorted first] \n\n Docs : \n value -1 is before position,0 is same position, 1 is after position \n sensitive default variant \n ignorePunctuation default false \n numeric default false \n caseFirst default false (locale-dependent)",
  },
  "match": {
    "prefix": "str_match",
    "body": [
      "${0}${1:string}.match(${2:rgx})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return info :type ",
  },
  "matchAll": {
    "description": "match based on \n return nested array",
    "prefix": "str_match_all",
    "body": [
      "[...${1:string}.matchAll(${0:rgx})]"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "pad": {
    "description": "pad to end or start \n return new string",
    "prefix": "str_pad",
    "body": [
      "${0:string}.pad${1:End/Start}(${2:length}, \"${3:padString}\")"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "repeat": {
    "description": "copy previous string as many count \n return new string ",
    "prefix": "str_repeat",
    "body": [
      "${0:string}.repeat(${1:count})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "replace": {
    "description": "replace target(rgx|substr), with newSubStr|function result \n fn(matchChar) => logic \n return string (new)",
    "prefix": "str_replace",
    "body": [
      "${1:string}.replace(\"${2:rgx|substr}\", (matchChar) => ${0:logic})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "search": {
    "description": "return index from regexp \n return number",
    "prefix": "str_search",
    "body": [
      "${0:string}.search(/${1:rgx}/)"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "split": {
    "description": "split string to string element for array according separator \n @param limit for array length \n return new array",
    "prefix": "str_split",
    "body": [
      "${1:string}.split(${2:separator|rgx})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "starts_with": {
    "description": "check whether string start with searchString \n @SecondParam indexStart | number \n return boolean",
    "prefix": "str_starts_with",
    "body": [
      "${1:string}.startsWith(${0:searchString})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "substring": {
    "description": "return subset | new string \n from exclusive index",
    "prefix": "str_substring",
    "body": [
      "${1:string}.substring(${2:indexStart}, ${0:exclusiveIndexEnd})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "to_lower_case": {
    "description": "return lower string",
    "prefix": "str_to_lower_case",
    "body": [
      "${0:string}.toLowerCase()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "to_upper_case": {
    "description": "return upper string",
    "prefix": "str_to_upper_case",
    "body": [
      "${0:string}.toUpperCase()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "to_string": {
    "description": "convert di string",
    "prefix": "str_to_string",
    "body": [
      "String(${0:value})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "trim": {
    "description": "trim for clear space for start and end \n trimStart only left \n trimEnd only right",
    "prefix": "str_trim",
    "body": [
      "${1:string}.trim${1:Start/End}()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  /** 
  * * JavaScript Array Snippet (jssnippet)
  */
  "at": {
    "description": "return element according with index \n for last index use @param -1 etc",
    "prefix": "arr_at",
    "body": [
      "${1:array}.at(${0:index})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "copy_within": {
    "description": "copy from start copy index and only replace from target \n @thirdParam exclusive end copy index \n return  array",
    "prefix": "arr_copy_within",
    "body": [
      "${1:array}.copyWithin(${1:target}, ${2:startCopyIndex})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "entries": {
    "description": "replace every element to object iterator [A] => [indexA,ValueA] \n return array",
    "prefix": "arr_entries",
    "body": [
      "${0:array}.entries()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "every": {
    "description": "if every element passed test function return true else false",
    "prefix": "arr_every",
    "body": [
      "${1:array}.every((element${2:, index}) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "fill": {
    "description": "replace element from start index to end exclusiveIndex \n no return new array \n @secondParam startIndex | number \n @thirdParam exclusiveEndIndex | number",
    "prefix": "arr_fill",
    "body": [
      "${1:array}.fill(${1:value})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "filter": {
    "description": "return new array with element passed test function",
    "prefix": "arr_filter",
    "body": [
      "${1:array}.filter((element${2:, index}) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "find": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return first element as need in callback",
    "prefix": "arr_find",
    "body": [
      "${1:array}.find((element) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "find_last": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return last element as need in callback",
    "prefix": "arr_find_last",
    "body": [
      "${1:array}.findLast((element) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "find_index": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return first element index as need in callback",
    "prefix": "arr_find_index",
    "body": [
      "${1:array}.findIndex((element) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "find_last_index": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return last element index as need in callback",
    "prefix": "arr_find_last_index",
    "body": [
      "${1:array}.findLastIndex((element) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "flat": {
    "description": "join sub array / collapse nested array according with depth | number \n @useParam Infinity if depth not sure / dynamic \n return new array",
    "prefix": "arr_flat",
    "body": [
      "${1:array}.flat(${0:depth})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "flat_map": {
    "description": "make nested first and collapse sub array \n return new array",
    "prefix": "arr_flat_map",
    "body": [
      "${1:array}.flatMap(element => [${0}])"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "for_each": {
    "description": "running specific function for each element",
    "prefix": "arr_for_each",
    "body": [
      "${1:array}.forEach((element${2:, index}) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "from": {
    "description": "@firstParam arrayLike|string|{length : count} to initialArray \n @secondParam mapCallback \n create and return new array",
    "prefix": "arr_from",
    "body": [
      "Array.from(${1:arrayLike|string|{length : count}}, (element${2:, index}) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "join": {
    "description": "join each element to string with separator \n join() === join(\",\") \n @useParam \"\" to get 1 string without any separator ",
    "prefix": "arr_join",
    "body": [
      "${1:array}.join(\"${0:separator}\")"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "keys": {
    "description": "return new array with index as elements",
    "prefix": "arr_keys",
    "body": [
      "[...${1:array}.keys()]"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "map": {
    "description": "running function to each element and create array with that elements",
    "prefix": "arr_map",
    "body": [
      "${1}.map((element${2:, index}) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "pop": {
    "description": "delete and return last element (mutator function)",
    "prefix": "arr_pop",
    "body": [
      "${0}.pop()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "push": {
    "description": "add element to last index and return current array length | number (mutator function)",
    "prefix": "arr_push",
    "body": [
      "${1}.push(${0:element})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "reduce": {
    "description": "calculate all element value \n @thirdCallbackParams index|number \n @fourthCallbackParams array \n return total calculate | number",
    "prefix": "arr_reduce",
    "body": [
      "${1}.reduce((accumulator, currentValue) => ${0:calculate logic},${2:initialAccumulator|number})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "reduceRight": {
    "description": "calculate all element value start from right | last element \n @thirdCallbackParams index|number \n @fourthCallbackParams array \n return total calculate | number",
    "prefix": "arr_reduce",
    "body": [
      "${1}.reduce((accumulator, currentValue) => ${0:calculate logic},${2:initialAccumulator|number})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "reverse": {
    "description": "reverse array order \n return reversed array (mutator function)",
    "prefix": "arr_reverse",
    "body": [
      "${0}.reverse()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "shift": {
    "description": "delete and return first element (mutator function)",
    "prefix": "arr_shift",
    "body": [
      "${0}.shift()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "some": {
    "description": "if some element passed test function return true",
    "prefix": "arr_some",
    "body": [
      "${1:array}.some((element${2:, index}) => ${0})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "sort": {
    "description": "sorting element according with compare callback | locale_compare \n default/no params ascending sort \n return sorted array (mutator function)",
    "prefix": "arr_sort",
    "body": [
      "${1:array}.sort((a,b) => ${0:a.localeCompare(b)})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "splice": {
    "description": "delete or add element array \n return removed element (mutator function) | array \n @useParam 0 for delete count no delete action",
    "prefix": "arr_splice",
    "body": [
      "${1:array}.splice(${2:startAction}, ${3:deleteCount}, ${4:...addValue})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "to_reversed": {
    "description": "reverse array order \n return reversed array",
    "prefix": "arr_to_reversed",
    "body": [
      "${0}.toReversed()"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "to_sorted": {
    "description": "sorting element according with compare callback | locale_compare \n default/no params ascending sort \n return sorted array",
    "prefix": "arr_to_sorted",
    "body": [
      "${1:array}.toSorted((a,b) => ${0:a.localeCompare(b)})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "to_spliced": {
    "description": "delete or add element array \n return removed element | array \n @useParam 0 for delete count no delete action",
    "prefix": "arr_to_spliced",
    "body": [
      "${1:array}.toSpliced(${2:startIndexAction}, ${3:deleteCount}, ${4:...addValue})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "unshift": {
    "description": "add element to first index and return current array length | number (mutator function)",
    "prefix": "arr_unshift",
    "body": [
      "${1}.unshift(${0:element})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "with": {
    "description": "return new array with 1 new element from new element at index target",
    "prefix": "arr_with",
    "body": [
      "${1}.with(${2:indexTarget}, ${0:newElement})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  /** 
  *  ! markerr
  * * JavaScript Object Snippet (jssnippet) 
  */
  "assign": {
    "description": "(Mutable function) \n return object already added source | object \n @firstParam is object target|{} new object \n @secondParams ...values",
    "prefix": "obj_assign",
    "body": [
      "Object.assign(${1:target|{}}, ${0:source1,source2,....sourceN source is object})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "create": {
    "prefix": "obj_create",
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "body": [
      "const ${1:obj} = Object.create(${2:prototype}, ${3:? propertiObject (snippetAble)})"
    ],
    "description": "(Immutable function)\nReturns object with prototype.\n@secondParam propertiesObject defines properties on the prototype.\nSecond param example:\nproperti: {\n  get() {\n    return value; // define default value here\n  },\n  set(value) {\n    this.properti = value; // to set properti value\n  },\n  enumerable: boolean; // define if shows during iteration\n  configurable: boolean; // define if can be reconfigured or deleted\n}",
  },
  "properti_object": {
    "prefix": "obj_properti_object",
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
    "body": [
      "{",
      "  ${3:propertyName}: {",
      "    enumerable: ${4:true}, // show in iteration",
      "    configurable: ${5:true}, // can be redefined/deleted via defineProperty",
      "    get() {",
      "    return ${6:defaultValue};",
      "    },",
      "    set(value) {",
      "     this.${3:propertyName} = value;",
      "     }",
      "  }",
      "}",
    ],
    "description": "(@secondParam for function Object.create)",
  },
  /** 
  *  
  * * JavaScript Import Snippet (jssnippet) 
  */
  "Import_Default": {
    "description": "Import_Default",
    "prefix": "imp_default",
    "body": [
      "import ${1} from \"${0}\""
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "Import_Export": {
    "description": "Import_Export",
    "prefix": "imp_export",
    "body": [
      "import {${1}} from \"${0}\""
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "Import": {
    "description": "Import",
    "prefix": "imp",
    "body": [
      "import \"${0}\""
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  /** 
  * * JavaScript Function Snippet (jssnippet)
  */
  "function": {
    "description": "fn",
    "prefix": "fn",
    "body": [
      "function ${1}(${2}) {",
      "  ${0}",
      "}"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "arrow_function": {
    "description": "fn",
    "prefix": "fn",
    "body": [
      "const ${1} = (${2}) => {",
      "  ${0}",
      "}"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "capitalize": {
    "description": "capitalize",
    "prefix": "fn_capitalize",
    "body": [
      "const ${0:capitalize} = (string) => {",
      "  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()",
      "}"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "debounce": {
    "description": "debounce function",
    "prefix": "fn_debounce",
    "body": [
      "function debounce(fn, delay = 300) {",
      "  let timeoutId;",
      "",
      "  return function (...args) {",
      "    clearTimeout(timeoutId);",
      "    timeoutId = setTimeout(() => fn.apply(this, args), delay);",
      "  };",
      "}"
    ],
    "scope": "javascript,javascriptreact",
  },
  "add_listener": {
    "description": "add_listener",
    "prefix": "fn_add_listener",
    "body": [
      "${1}.addEventListener(\"${2}\", ${0:handle${3}})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "remove_listener": {
    "description": "add_listener",
    "prefix": "fn_remove_listener",
    "body": [
      "${1}.removeEventListener(\"${2}\", handle${3})"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "for": {
    "description": "map",
    "prefix": "fn_for",
    "body": [
      "for (let i = 0; i < ${1}; i++) {",
      "  ${0}",
      "}",
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  /** 
  * * JavaScript Debug Snippet (jssnippet)
  */
  "debug_typeof": {
    "description": "debug_typeof",
    "prefix": "dbg_typeof",
    "body": [
      "console.debug(typeof ${0})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "debug_console": {
    "description": "debug_info",
    "prefix": "dbg_info",
    "body": [
      "console.debug(${0})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  /** 
  * * React Import Snippet (reactsnippet)
  */
  "Import_Create_Context": {
    "description": "Import_Create_Context",
    "prefix": "rim_create_context",
    "body": [
      "import { createContext, useContext } from \"react\";"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Import_Context": {
    "description": "Import_React_Context",
    "prefix": "rim_context",
    "body": [
      "import { ${0}Context } from \"./use${1}Context.js\";"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Import_Hook": {
    "description": "Import_Hook",
    "prefix": "rim_hook",
    "body": [
      "import {${0}} from \"react\";"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  /** 
  * * React Function Component Snippet (reactsnippet)
  */
  "Function_Index_Component": {
    "description": "Function_Index_Component",
    "prefix": "rfc_index",
    "body": [
      "const ${1} = () => {",
      "  return (",
      "    <${0}>",
      "    ${TM_FILENAME_BASE}",
      "    </${0}>",
      "  )",
      "}",
      "",
      "export default ${1}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Function_Component": {
    "description": "Function_Component",
    "prefix": "rfc",
    "body": [
      "const ${TM_FILENAME_BASE} = () => {",
      "  return (",
      "    <${0}>",
      "    ${TM_FILENAME_BASE}",
      "    </${0}>",
      "  )",
      "}",
      "",
      "export default ${TM_FILENAME_BASE}"
    ],
    "scope": "typescript, typescriptreact, javascript, javascriptreact",
  },
  "Function_Provider_Component": {
    "description": "Function_Provider_Component",
    "prefix": "rfc_provider",
    "body": [
      "export default function ${1}Provider({ children }) {",
      "  ",
      "  const providerValue = undefined; // TODO: defined value",
      "  return (",
      "    <${1}Context.Provider value={providerValue}>",
      "      {children}",
      "    </${1}Context${0}.Provider>",
      "  );",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  /** 
  * * React Use Hooks Snippet (reactsnippet)
  */
  "Use_State": {
    "description": "Use_State",
    "prefix": "ruh_use_state",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = ${0:useState}(${2})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Use_Memo": {
    "description": "Use_State",
    "prefix": "ruh_use_state",
    "body": [
      "${0:useMemo}(() => {",
      "  // TODO : define value",
      "}, [])",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Use_Ref": {
    "description": "Use_Ref",
    "prefix": "ruh_use_ref",
    "body": [
      "const ${1} = ${0:useRef}(${2})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Use_Effect": {
    "description": "Use_Effect",
    "prefix": "ruh_use_effect",
    "body": [
      "${0:useEffect}(() => {",
      "  // TODO: define logic",
      "",
      "  return () => {",
      "    // ? need cleaner",
      "  }",
      "}, [])",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Use_Context": {
    "description": "Use_Context",
    "prefix": "ruh_use_context",
    "body": [
      "const {${1}} = ${0:use${2/(.*)/${2:/capitalize}/}Context}()"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  /** 
  * * React Create Snippet (reactsnippet)
  */
  "Create_Root": {
    "description": "Create_Root",
    "prefix": "rc_root",
    "body": [
      "import { StrictMode } from \"react\";",
      "import { createRoot } from \"react-dom/client\";",
      "",
      "createRoot(document.getElementById(\"root\")).render(",
      "  <StrictMode>",
      "  </StrictMode>",
      ");",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Create_Context": {
    "description": "Create_Context",
    "prefix": "rc_context",
    "body": [
      "export const ${1}Context = createContext(null);",
      "",
      "export function use${1}Context() {",
      "  const context = useContext(${1}Context);",
      "  if (!context) {",
      "    throw new Error(\"${1}Context must be used inside provider\")",
      "  }",
      "  return context;",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
}