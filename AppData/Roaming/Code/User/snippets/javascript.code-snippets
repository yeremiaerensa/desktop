{
  "help": {
    "prefix": "help_prefix",
    "body": [
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(hover me) : \n\n dbg = debug \n arr = array method \n str = string method \n obj = object method \n fn = custom function \n imp = import auto-complete \n\n rim = react import \n rc = react create method \n ruh = react use hook \n rfc = react function component \n\n"
  },
  /*
  ! ------------------- AUTOCOMPLETE SECTION -------------------
  */
  "const": {
    "prefix": "const",
    "body": [
      "const ${1:name} ="
    ],
    "scope": "javascript, javascriptreact",
    "description": "(auto-complete) \n when text const \n\n"
  },
  /*
  ! ------------------- ARRAY | STRING METHOD SECTION -------------------
  */
  "at": {
    "prefix": "arr_or_str_at",
    "body": [
      "${3}${1:string}.at(${2})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return element|character :any|string \n\n @firstParam index :number \n [define : search point] \n @use negative :number \n [define : start search from end/right] \n @defaultValue 0 :number \n\n",
  },
  "concat": {
    "prefix": "arr_or_str_concat",
    "body": [
      "${3}${1:array|string}.concat(${2:...valueN :any|string})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return concatenated :string \n @param valueN :any|string \n [define : element or string can be added] \n\n Hover Me : \n no maximum parameter \n\n",
  },
  "includes": {
    "prefix": "arr_or_str_includes",
    "body": [
      "${3}${1:array|string}.includes(${2:element|substring :any|string})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return isIncludes :boolean \n\n @firstParam element|string :string \n [define : element for array string fo string] \n\n @secondParam index ?:number \n [define : to define start position] \n\n Hover Me : \n to check element or substring includes or not \n\n",
  },
  "index_of": {
    "prefix": "arr_or_str_index_of",
    "body": [
      "${3}${1:array|string}.indexOf(${2:element|character :any|string})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return index :number \n\n @secondParams fromIndex ?:number \n [define: search starting point] \n\n Hover Me : \n to get index from the first element or character discovered \n if not found will return -1 \n\n",
  },
  "last_index_of": {
    "prefix": "arr_or_str_last_index_of",
    "body": [
      "${3}${1:array|string}.lastIndexOf(${2:element|character :any|string})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return index :number \n\n @secondParams fromIndex ?:number \n [define: search starting point] \n\n Hover Me : \n to get index from the last element or character discovered \n if not found will return -1 \n\n",
  },
  "slice": {
    "prefix": "arr_or_str_slice",
    "body": [
      "${3}${1:array|string}.slice(${2})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return sliced :string \n\n @firstParam index ?:number \n [define : start slice position] \n @use negative :number \n [define : start slice from end/right] \n @defaultValue 0 :number \n\n @secondParam exclusiveIndex ?:number \n [define: end of sliced ] \n @use negative :number \n [define : start count exclusiveIndex from end/right] \n @defaultValue data.length :number \n\n Hover Me : \n exclusiveIndex its mean index - 1 \n without params it mean copy data \n able to use negative number \n\n",
  },
  /*
  ! ------------------- STRING METHOD SECTION -------------------
  */
  "code_point_at": {
    "prefix": "str_code_point_at",
    "body": [
      "${0}${1:string}.codePointAt(${2:index :number})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return unicode :number \n\n Docs : \n get unicode from character according the index ",
  },
  "end_with": {
    "prefix": "str_end_with",
    "body": [
      "${1:string}.endsWith(\"${0:substring :string}\")"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return isEndsWith :boolean \n\n @secondParams exclusiveIndex ?:number \n [define : inspection area limits] \n @Params exclusiveIndex :number \n [define: deadline but not including (index - 1)] \n\n Docs : \n inspect string is end with substring or not",
  },
  "locale_compare": {
    "prefix": "str_locale_compare",
    "body": [
      "${0}${1:a}.localeCompare(${2:b}, \"id\", {",
      "  sensitivity: \"${3:base|accent|case|variant}\",",
      "  ignorePunctuation: ${4:true|false},",
      "  numeric: ${5:true|false},",
      "  caseFirst: \"${6:upper|lower}\"",
      "})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return -1|0|1 :number \n @value base \n [define : normal no base on] \n @value accent \n [define : base on accent (a ≠ á)] \n @value case \n [define : base on case (a ≠ A, but a == á)] \n @value variant \n [define : base on accent and case] \n @props ignorePunctuation \n [define : isIgnorePunctuation (false : \"a-b\" ≠ \"ab\")] \n @props numeric \n [define : isNumeric (true : \"10\" > \"2\")] \n @value upper \n [define : capital are sorted first] \n @value lower \n [define : lower are sorted first] \n\n Docs : \n value -1 is before position,0 is same position, 1 is after position \n sensitive default variant \n ignorePunctuation default false \n numeric default false \n caseFirst default false (locale-dependent)",
  },
  "match": {
    "prefix": "str_match",
    "body": [
      "${0}${1:string}.match(${2:rgx})"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(Pure Function | Immutable) \n @return info :type ",
  },
  "matchAll": {
    "description": "match based on \n return nested array",
    "prefix": "str_match_all",
    "body": [
      "[...${1:string}.matchAll(${0:rgx})]"
    ],
    "scope": "javascript, javascriptreact",
  },
  "pad": {
    "description": "pad to end or start \n return new string",
    "prefix": "str_pad",
    "body": [
      "${0:string}.pad${1:End/Start}(${2:length}, \"${3:padString}\")"
    ],
    "scope": "javascript, javascriptreact",
  },
  "repeat": {
    "description": "copy previous string as many count \n return new string ",
    "prefix": "str_repeat",
    "body": [
      "${0:string}.repeat(${1:count})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "replace": {
    "description": "replace target(rgx|substr), with newSubStr|function result \n fn(matchChar) => logic \n return string (new)",
    "prefix": "str_replace",
    "body": [
      "${1:string}.replace(\"${2:rgx|substr}\", (matchChar) => ${0:logic})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "search": {
    "description": "return index from regexp \n return number",
    "prefix": "str_search",
    "body": [
      "${0:string}.search(/${1:rgx}/)"
    ],
    "scope": "javascript, javascriptreact",
  },
  "split": {
    "description": "split string to string element for array according separator \n @param limit for array length \n return new array",
    "prefix": "str_split",
    "body": [
      "${1:string}.split(${2:separator|rgx})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "starts_with": {
    "description": "check whether string start with searchString \n @SecondParam indexStart | number \n return boolean",
    "prefix": "str_starts_with",
    "body": [
      "${1:string}.startsWith(${0:searchString})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "substring": {
    "description": "return subset | new string \n from exclusive index",
    "prefix": "str_substring",
    "body": [
      "${1:string}.substring(${2:indexStart}, ${0:exclusiveIndexEnd})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "to_lower_case": {
    "description": "return lower string",
    "prefix": "str_to_lower_case",
    "body": [
      "${0:string}.toLowerCase()"
    ],
    "scope": "javascript, javascriptreact",
  },
  "to_upper_case": {
    "description": "return upper string",
    "prefix": "str_to_upper_case",
    "body": [
      "${0:string}.toUpperCase()"
    ],
    "scope": "javascript, javascriptreact",
  },
  "to_string": {
    "description": "convert di string",
    "prefix": "str_to_string",
    "body": [
      "String(${0:value})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "trim": {
    "description": "trim for clear space for start and end \n trimStart only left \n trimEnd only right",
    "prefix": "str_trim",
    "body": [
      "${1:string}.trim${1:Start/End}()"
    ],
    "scope": "javascript, javascriptreact",
  },
  /*
! ------------------- ARRAY METHOD SECTION -------------------
*/
  "copy_within": {
    "description": "copy from start copy index and only replace from target \n @thirdParam exclusive end copy index \n return  array",
    "prefix": "arr_copy_within",
    "body": [
      "${1:array}.copyWithin(${1:target}, ${2:startCopyIndex})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "entries": {
    "description": "replace every element to object iterator [A] => [indexA,ValueA] \n return array",
    "prefix": "arr_entries",
    "body": [
      "${0:array}.entries()"
    ],
    "scope": "javascript, javascriptreact",
  },
  "every": {
    "description": "if every element passed test function return true else false",
    "prefix": "arr_every",
    "body": [
      "${1:array}.every((element${2:, index}) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "fill": {
    "description": "replace element from start index to end exclusiveIndex \n no return new array \n @secondParam startIndex | number \n @thirdParam exclusiveEndIndex | number",
    "prefix": "arr_fill",
    "body": [
      "${1:array}.fill(${1:value})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "filter": {
    "description": "return new array with element passed test function",
    "prefix": "arr_filter",
    "body": [
      "${1:array}.filter((element${2:, index}) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "find": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return first element as need in callback",
    "prefix": "arr_find",
    "body": [
      "${1:array}.find((element) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "find_last": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return last element as need in callback",
    "prefix": "arr_find_last",
    "body": [
      "${1:array}.findLast((element) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "find_index": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return first element index as need in callback",
    "prefix": "arr_find_index",
    "body": [
      "${1:array}.findIndex((element) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "find_last_index": {
    "description": "@secondCallbackParams index|number \n @thirdCallbackParams array \n return last element index as need in callback",
    "prefix": "arr_find_last_index",
    "body": [
      "${1:array}.findLastIndex((element) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "flat": {
    "description": "join sub array / collapse nested array according with depth | number \n @useParam Infinity if depth not sure / dynamic \n return new array",
    "prefix": "arr_flat",
    "body": [
      "${1:array}.flat(${0:depth})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "flat_map": {
    "description": "make nested first and collapse sub array \n return new array",
    "prefix": "arr_flat_map",
    "body": [
      "${1:array}.flatMap(element => [${0}])"
    ],
    "scope": "javascript, javascriptreact",
  },
  "for_each": {
    "description": "running specific function for each element",
    "prefix": "arr_for_each",
    "body": [
      "${1:array}.forEach((element${2:, index}) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "array_from": {
    "prefix": "arr_from",
    "body": [
      "Array.from({length : ${1::number}}, ${2:mapFunction :fn})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(Pure Function | Immutable) \n @return newArray :array \n\n @firstParam length|arrayLike :object|string \n [define : length for custom,array like for transform to array] \n\n @secondParam mapFunction :fn \n [define : map function to custom element] \n\n Hover Me : \n to @ex length = {length : 100} \n @ex arrayLike = \"array\" \n map function has 2 params, element and index \n\n"
  },
  "join": {
    "description": "join each element to string with separator \n join() === join(\",\") \n @useParam \"\" to get 1 string without any separator ",
    "prefix": "arr_join",
    "body": [
      "${1:array}.join(\"${0:separator}\")"
    ],
    "scope": "javascript, javascriptreact",
  },
  "keys": {
    "description": "return new array with index as elements",
    "prefix": "arr_keys",
    "body": [
      "[...${1:array}.keys()]"
    ],
    "scope": "javascript, javascriptreact",
  },
  "map": {
    "description": "running function to each element and create array with that elements",
    "prefix": "arr_map",
    "body": [
      "${1}.map((element${2:, index}) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "pop": {
    "description": "delete and return last element (mutator function)",
    "prefix": "arr_pop",
    "body": [
      "${0}.pop()"
    ],
    "scope": "javascript, javascriptreact",
  },
  "push": {
    "description": "add element to last index and return current array length | number (mutator function)",
    "prefix": "arr_push",
    "body": [
      "${1}.push(${0:element})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "reduce": {
    "description": "calculate all element value \n @thirdCallbackParams index|number \n @fourthCallbackParams array \n return total calculate | number",
    "prefix": "arr_reduce",
    "body": [
      "${1}.reduce((accumulator, currentValue) => ${0:calculate logic},${2:initialAccumulator|number})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "reduceRight": {
    "description": "calculate all element value start from right | last element \n @thirdCallbackParams index|number \n @fourthCallbackParams array \n return total calculate | number",
    "prefix": "arr_reduce",
    "body": [
      "${1}.reduce((accumulator, currentValue) => ${0:calculate logic},${2:initialAccumulator|number})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "reverse": {
    "description": "reverse array order \n return reversed array (mutator function)",
    "prefix": "arr_reverse",
    "body": [
      "${0}.reverse()"
    ],
    "scope": "javascript, javascriptreact",
  },
  "shift": {
    "description": "delete and return first element (mutator function)",
    "prefix": "arr_shift",
    "body": [
      "${0}.shift()"
    ],
    "scope": "javascript, javascriptreact",
  },
  "some": {
    "description": "if some element passed test function return true",
    "prefix": "arr_some",
    "body": [
      "${1:array}.some((element${2:, index}) => ${0})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "sort": {
    "description": "sorting element according with compare callback | locale_compare \n default/no params ascending sort \n return sorted array (mutator function)",
    "prefix": "arr_sort",
    "body": [
      "${1:array}.sort((a,b) => ${0:a.localeCompare(b)})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "splice": {
    "description": "delete or add element array \n return removed element (mutator function) | array \n @useParam 0 for delete count no delete action",
    "prefix": "arr_splice",
    "body": [
      "${1:array}.splice(${2:startAction}, ${3:deleteCount}, ${4:...addValue})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "to_reversed": {
    "description": "reverse array order \n return reversed array",
    "prefix": "arr_to_reversed",
    "body": [
      "${0}.toReversed()"
    ],
    "scope": "javascript, javascriptreact",
  },
  "to_sorted": {
    "description": "sorting element according with compare callback | locale_compare \n default/no params ascending sort \n return sorted array",
    "prefix": "arr_to_sorted",
    "body": [
      "${1:array}.toSorted((a,b) => ${0:a.localeCompare(b)})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "to_spliced": {
    "description": "delete or add element array \n return removed element | array \n @useParam 0 for delete count no delete action",
    "prefix": "arr_to_spliced",
    "body": [
      "${1:array}.toSpliced(${2:startIndexAction}, ${3:deleteCount}, ${4:...addValue})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "unshift": {
    "description": "add element to first index and return current array length | number (mutator function)",
    "prefix": "arr_unshift",
    "body": [
      "${1}.unshift(${0:element})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "with": {
    "description": "return new array with 1 new element from new element at index target",
    "prefix": "arr_with",
    "body": [
      "${1}.with(${2:indexTarget}, ${0:newElement})"
    ],
    "scope": "javascript, javascriptreact",
  },
  /*
! ------------------- OBJECT METHOD SECTION -------------------
*/
  "assign": {
    "description": "(Mutable function) \n return object already added source | object \n\n @firstParam is object target|{} new object \n\n @secondParams ...values",
    "prefix": "obj_assign",
    "body": [
      "Object.assign(${1:target|{}}, ${0:source1,source2,....sourceN source is object})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "create": {
    "prefix": "obj_create",
    "scope": "javascript, javascriptreact",
    "body": [
      "const ${1:obj} = Object.create(${2:prototype}, ${3:? propertiObject (snippetAble)})"
    ],
    "description": "(Immutable function)\nReturns object with prototype.\n@secondParam propertiesObject defines properties on the prototype.\nSecond param example:\nproperti: {\n  get() {\n    return value; // define default value here\n  },\n  set(value) {\n    this.properti = value; // to set properti value\n  },\n  enumerable: boolean; // define if shows during iteration\n  configurable: boolean; // define if can be reconfigured or deleted\n}",
  },
  "properti_object": {
    "prefix": "obj_properti_object",
    "scope": "javascript, javascriptreact",
    "body": [
      "{",
      "  ${3:propertyName}: {",
      "    enumerable: ${4:true}, // show in iteration",
      "    configurable: ${5:true}, // can be redefined/deleted via defineProperty",
      "    get() {",
      "    return ${6:defaultValue};",
      "    },",
      "    set(value) {",
      "     this.${3:propertyName} = value;",
      "     }",
      "  }",
      "}",
    ],
    "description": "(@secondParam for function Object.create)",
  },
  /*
! ------------------- IMPORT AUTOCOMPLETE SECTION -------------------
*/
  "Import_Default": {
    "description": "Import_Default",
    "prefix": "imp_default",
    "body": [
      "import ${1} from \"${0}\""
    ],
    "scope": "javascript, javascriptreact",
  },
  "Import_Export": {
    "description": "Import_Export",
    "prefix": "imp_export",
    "body": [
      "import {${1}} from \"${0}\""
    ],
    "scope": "javascript, javascriptreact",
  },
  "Import": {
    "description": "Import",
    "prefix": "imp",
    "body": [
      "import \"${0}\""
    ],
    "scope": "javascript, javascriptreact",
  },
  /*
! ------------------- CUSTOM FUNCTION SECTION -------------------
*/
  "function": {
    "description": "fn",
    "prefix": "fn",
    "body": [
      "function ${1}(${2}) {",
      "  ${0}",
      "}"
    ],
    "scope": "javascript, javascriptreact",
  },
  "arrow_function": {
    "description": "fn",
    "prefix": "fn_arrow",
    "body": [
      "(${1}) => {",
      "  ${2}",
      "}"
    ],
    "scope": "javascript, javascriptreact",
  },
  "capitalize": {
    "description": "capitalize",
    "prefix": "fn_capitalize",
    "body": [
      "const ${0:capitalize} = (string) => {",
      "  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()",
      "}"
    ],
    "scope": "javascript, javascriptreact",
  },
  "throttle": {
    "description": "(javascript module) \n\n @firstParam fn :fn \n [define : callback declare] \n\n @secondParam delay :number \n [define : execution delay] \n\n @thirdParam option :object \n [define : flag option] \n @props leading [define : run in the beginning (debounce)] \n @props trailing [define : run after delay]",
    "prefix": "fn_throttle",
    "body": [
      "function throttle(fn, delay = 1000,options = {leading: true, trailing: true}) {",
      "  let isThrottled = false;",
      "  let lastArgs = null",
      "",
      "  return function throttled(...args) {",
      "    const {leading, trailing} = options",
      "",
      "    if (isThrottled && trailing) {",
      "      lastArgs = args",
      "    } else {",
      "      if (leading) {",
      "        fn.apply(this,args)",
      "      } else if (trailing) {",
      "        lastArgs = args",
      "      }",
      "",
      "      isThrottled = true",
      "      setTimeout(()=>{",
      "        isThrottled = false;",
      "        if (trailing && lastArgs) {",
      "          throttled.apply(this, lastArgs)",
      "          lastArgs = null",
      "         }",
      "      },delay)",
      "    }",
      "  };",
      "}"
    ],
    "scope": "javascript",
  },
  "throttle_react_hook": {
    "description": "(react hook) \n\n @firstParam fn :fn \n [define : callback declare] \n\n @secondParam delay :number \n [define : execution delay] \n\n @thirdParam option :object \n [define : flag option] \n @props leading [define : run in the beginning (debounce)] \n @props trailing [define : run after delay]",
    "prefix": "hook_throttle",
    "body": [
      "import { useRef, useCallback, useEffect } from \"react\";",
      "",
      "export default function useThrottle(",
      "fn,",
      "delay = 1000,",
      "options = { leading: true, trailing: true }",
      ") {",
      "  const fnRef = useRef(fn);",
      "  const lastArgs = useRef(null);",
      "  const timeoutRef = useRef(null);",
      "  const isThrottled = useRef(false);",
      "",
      "  const { leading, trailing } = options;",
      "",
      "  useEffect(() => {",
      "    fnRef.current = fn;",
      "  }, [fn]);",
      "",
      "  const throttledFn = useCallback((...args) => {",
      "    if (isThrottled.current) {",
      "      if (trailing) lastArgs.current = args;",
      "      return;",
      "    }",
      "",
      "    if (leading) {",
      "      fnRef.current(...args);",
      "    } else if (trailing) {",
      "      lastArgs.current = args;",
      "    }",
      "",
      "    isThrottled.current = true;",
      "",
      "    timeoutRef.current = setTimeout(() => {",
      "      isThrottled.current = false;",
      "",
      "      if (trailing && lastArgs.current) {",
      "        fnRef.current(...lastArgs.current);",
      "        lastArgs.current = null;",
      "      }",
      "    }, delay);",
      "  },",
      "  [delay, leading, trailing]",
      "  );",
      "",
      "  const cancelThrottle = useCallback(() => {",
      "    if (timeoutRef.current) {",
      "      clearTimeout(timeoutRef.current);",
      "      timeoutRef.current = null;",
      "    }",
      "    isThrottled.current = false;",
      "    lastArgs.current = null;",
      "  }, []);",
      "",
      "  const flushThrottle = useCallback(() => {",
      "    if (timeoutRef.current) {",
      "      clearTimeout(timeoutRef.current);",
      "      timeoutRef.current = null;",
      "    }",
      "",
      "    isThrottled.current = false;",
      "",
      "    if (lastArgs.current) {",
      "      fnRef.current(...lastArgs.current);",
      "      lastArgs.current = null;",
      "    }",
      "  }, []);",
      "",
      "  return [throttledFn, { cancelThrottle, flushThrottle }];",
      "}",
    ],
    "scope": "javascript, javascriptreact",
  },
  "add_listener": {
    "description": "add_listener",
    "prefix": "fn_add_listener",
    "body": [
      "${1}.addEventListener(\"${2}\", ${0:handle${3}})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "remove_listener": {
    "description": "add_listener",
    "prefix": "fn_remove_listener",
    "body": [
      "${1}.removeEventListener(\"${2}\", handle${3})"
    ],
    "scope": "javascript, javascriptreact",
  },
  "for": {
    "description": "map",
    "prefix": "fn_for",
    "body": [
      "for (let i = 0; i < ${1}; i++) {",
      "  ${0}",
      "}",
    ],
    "scope": "javascript, javascriptreact",
  },
  "describe": {
    "prefix": "test_describe",
    "body": [
      "describe(\"${1:name_test_group}\", function () {",
      "  it(\"should ${2:case_result}\", function () {",
      "    expect(${3:case}).toBe(${4:case_return});",
      "  });",
      "});",
    ],
    "scope": "javascript, typescript",
    "description": "(jest unit test)"
  },
  "it": {
    "prefix": "test_it",
    "body": [
      "it(\"should ${1:case_result}\", function () {",
      "  expect(${2:case}).toBe(${3:case_return});",
      "});",
    ],
    "scope": "javascript, typescript",
    "description": "(jest unit test)"
  },
  /*
  ! ------------------- DEBUG SECTION -------------------
  */
  "debug_typeof": {
    "description": "debug_typeof",
    "prefix": "dbg_typeof",
    "body": [
      "typeof ${1:type} === \"${2:type}\""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "debug_console": {
    "description": "debug_info",
    "prefix": "dbg_info",
    "body": [
      "console.debug(${0})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  /*
  ! ------------------- REACT IMPORT SECTION -------------------
  */
  "Import_Create_Context": {
    "description": "Import_Create_Context",
    "prefix": "rim_create_context",
    "body": [
      "import { createContext, useContext } from \"react\";"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Import_Context": {
    "description": "Import_React_Context",
    "prefix": "rim_context",
    "body": [
      "import { ${0}Context } from \"./use${1}Context.js\";"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Import_Hook": {
    "description": "Import_Hook",
    "prefix": "rim_hook",
    "body": [
      "import {${0}} from \"react\";"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
  },
  "Snippet_Name": {
    "prefix": "obj_Snippet_Name",
    "body": [
      ""
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": ""
  },
  /*
! ------------------- REACT FUNCTION COMPONENT SECTION -------------------
*/
  "function_index_component": {
    "prefix": "rfc_index",
    "body": [
      "const ${1/(.*)/${1:/capitalize}/} = () => {",
      "  return (",
      "    <${2}>",
      "    ${1/(.*)/${1:/capitalize}/}",
      "    </${2}>",
      "  )",
      "}",
      "",
      "export default ${1/(.*)/${1:/capitalize}/}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react function component) to create index component skeleton",
  },
  "function_component": {
    "prefix": "rfc",
    "body": [
      "const ${TM_FILENAME_BASE} = () => {",
      "  return (",
      "    <${1}>",
      "    ${TM_FILENAME_BASE}",
      "    </${1}>",
      "  )",
      "}",
      "",
      "export default ${TM_FILENAME_BASE}"
    ],
    "scope": "javascript, javascriptreact",
    "description": "(react function component) \n\n Hover Me : \n to create component function \n\n",
  },
  "function_provider_fragment": {
    "prefix": "rfc_provider",
    "body": [
      "<${1}.Provider value={}>${0}</${1}.Provider>",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react function component) \n\n Hover Me : \n to create provider \n\n",
  },
  /*
! ------------------- REACT USE HOOK SECTION -------------------
*/
  "use_state": {
    "prefix": "ruh_use_state",
    "body": [
      "const [${1}, set${1/(.*)/${1:/capitalize}/}] = ${3:useState}(${2:initial value :any})"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react use hook) \n\n Hover Me : \n to declare trigger value and handler trigger to set trigger value \n if trigger value update by handler \n component will re-render with new value from handler \n\n",
  },
  "use_memo": {
    "prefix": "ruh_use_memo",
    "body": [
      "${3:useMemo}(${1:callback :fn}, [${2:dependenciesElement :any}])"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react use hook) \n\n @firstParam callback :fn \n [define : value to be cached] \n\n @secondParam dependenciesElement :any \n [define : trigger value] \n\n Hover Me : \n callback return value that want to be cached, value type :any \n if trigger value get updated, callback will running again to get new value \n if dependencies = [] , value only define once when first render \n\n use for : \n cached value array|object \n declare complex function that return a value \n\n",
  },
  "use_ref": {
    "prefix": "ruh_use_ref",
    "body": [
      "const ${1:name}Ref = ${2:useRef}(null);"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react use hook) \n Hover Me : \n to access DOM \n to store value that don't need to affect rendering \n @ex store interval id \n\n ",
  },
  "use_effect": {
    "prefix": "ruh_use_effect",
    "body": [
      "${4:useEffect}(() => {",
      "  ${1:sideEffect}",
      "",
      "  return () => {${2:cleanup}} ",
      "}, [${3:dependencies :any}])",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react use hook) \n\n @firstParam sideEffectCallback :any \n [define : declare function that run side effect] \n\n @secondCallbackParam dependencies :array \n [define : trigger value to run use effect] \n\n @return cleanerCallback :fn [define: function will clean value] \n\n Hover Me : \n run side effect after first rendering \n if dependencies update useEffect will call again \n if no have trigger value, use effect will call once \n cleaner callback useful keep safe memory usage \n\n must be clean \n eventListener  => removeEventListener \n setInterval => clearInterval(id) \n setTimeout => clearTimeout(id) \n fetch API => new AbortController() use method signal() and abort() \n websocket/subscription => new WebSocket('ws://example.com/socket') use method close() \n state => isMounted :flag \n\n",
  },
  "use_context": {
    "prefix": "ruh_use_context",
    "body": [
      "const ${1} = ${3:use${2}Context}()"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react use hook custom) \n\n Hover Me : \n get value form provider with use context hook \n  @use for avoid props drilling \n @use for sharing value between components (global state) \n\n",
  },
  "use_callback": {
    "prefix": "ruh_use_callback",
    "body": [
      "${3:useCallback}(${1:callback :fn}, [${2:dependenciesElement :any}])"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react use hook) \n\n @firstParam callback :fn \n [define : function want to be use] \n\n @secondParam dependencies :array \n [define : trigger value] \n\n Hover Me : \n prevent function re-creation \n  to memoized or cache function \n if dependencies get updated then function will re-create \n if no have dependencies or [], function only made once \n\n"
  },
  /*
 ! ------------------- REACT CREATE SECTION -------------------
 */
  "create_root": {
    "prefix": "rc_root",
    "body": [
      "import { StrictMode } from \"react\";",
      "import { createRoot } from \"react-dom/client\";",
      "",
      "createRoot(document.getElementById(\"root\")).render(",
      "  <StrictMode>",
      "  <${1:App}/>",
      "  </StrictMode>",
      ");",
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react create function) \n\n Hover Me : \n to define app root \n\n",
  },
  "create_context": {
    "prefix": "rc_context",
    "body": [
      "export const ${1}Context = createContext(null);",
      "",
      "export function use${1/(.*)/${1:/capitalize}/}Context() {",
      "  const context = useContext(${1}Context);",
      "  if (!context) {",
      "    throw new Error(\"${1}Context must be used inside provider\")",
      "  }",
      "  return context;",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react create function) \n\n Hover Me : \n to create new context and useContextHooks with custom hooks \n\n"
  },
  "create_hook": {
    "prefix": "rc_hook",
    "body": [
      "import {} from \"react\";",
      "",
      "export default function ${TM_FILENAME_BASE}() {",
      "  ${1}",
      "}"
    ],
    "scope": "typescript,typescriptreact,javascript,javascriptreact",
    "description": "(react create function) \n\n Hover Me : \n to create new context and useContextHooks with custom hooks \n\n"
  },
  /*
  ! ------------------- HELPER SECTION -------------------
  */
  "regex_pattern": {
    "description": "flag and parameter sample \n return comment",
    "prefix": "rgx_pattern",
    "body": [
      "// @param /\\d+/ (Satu atau lebih angka)",
      "// @param /^\\d+$/ (String berisi hanya angka)",
      "// @param /[a-z]+/ (Satu atau lebih huruf kecil)",
      "// @param /^[A-Za-z0-9]+$/ (Huruf besar/kecil + angka)",
      "// @param /^[A-Za-z]+$/ (String Hanya huruf besar atau kecil)",
      "// @param /^\\d{3}-\\d{4}$/ (3angka-4angka)",
      "// * flag g (Cari semua kecocokan, bukan cuma yang pertama)",
      "// * flag i (Abaikan huruf besar/kecil)",
      "// * flag \\d (Digit angka 0–9)",
      "// * flag \\D (Bukan digit)",
      "// * flag \\w ([a-zA-Z0-9_])",
      "// * flag \\W (Bukan word character)",
      "// * flag \\s (Spasi, tab (\\t), newline (\\n)",
      "// * flag \\S (Bukan spasi)",
      "// * flag . (Bukan word character)",
      "// * flag + (Satu atau lebih, \\d+ cocok '123')",
      "// * flag * (Nol atau lebih, \\d* cocok '', '1')",
      "// * flag ? (Nol atau satu, \\d? cocok '', '1')",
      "// * flag {n} (Tepat n kali, \\d{3} cocok '123')",
      "// * flag {n,} (Tepat n kali , \\d{2,} cocok '123')",
      "// * flag {n,m} (Antara n sampai m kali, \\d{2,4} cocok '12', '123')",
      "// * flag ^ (Awal string, ^a cocok 'abc' tapi bukan 'ba')",
      "// * flag $ (Akhir string, z$ cocok 'xyz' tapi bukan 'za')",
      "// * flag \\b (Antara n sampai m kali, \\bis\\b cocok 'this is it')",
      "// * flag \\B (Antara n sampai m kali, \\Bis\\B cocok 'mist' (dalam kata))",
      "// * flag \\B (Antara n sampai m kali, \\Bis\\B cocok 'mist' (dalam kata))",
      "// * flag \\B (Antara n sampai m kali, \\Bis\\B cocok 'mist' (dalam kata))",
      "// * flag [^]+ (apa aja kecuali yang di dalam bracket,[^abc] 'd', '1', dsb",
      "// * flag []+ (harus salah satu yang di dalam bracket, [abc] 'a', 'b', 'c'))",
      "",
    ],
    "scope": "javascript, javascriptreact",
  },
}